name: Build & Release CX Studio

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout cx-studio code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install npm dependencies
        run: npm install

      - name: Determine Backend Asset Filename
        id: set_asset_name
        shell: bash
        run: |
          VERSION="v0.7.0"
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "ASSET_NAME=cx-${VERSION}-windows-amd64.zip" >> $GITHUB_ENV
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            echo "ASSET_NAME=cx-${VERSION}-macos-x86_64.tar.gz" >> $GITHUB_ENV
          else
            echo "ASSET_NAME=cx-${VERSION}-linux-x86_64.tar.gz" >> $GITHUB_ENV
          fi

      - name: Download cx-server artifact
        uses: robinraju/release-downloader@v1
        with:
          repository: "flowcontextually/cx-shell"
          tag: "v0.7.0"
          fileName: "${{ env.ASSET_NAME }}"
          out-file-path: "./bin/"

      - name: Prepare cx-server executable
        shell: bash
        run: |
          mkdir -p ./resources
          ARCHIVE=$(find ./bin -type f -name "cx-*.zip" -o -name "cx-*.tar.gz")
          echo "Found archive: $ARCHIVE"
          if [[ "$ARCHIVE" == *.zip ]]; then
            unzip "$ARCHIVE" -d ./bin
          else
            tar -xzf "$ARCHIVE" -C ./bin
          fi
          EXECUTABLE_NAME="cx"
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            EXECUTABLE_NAME="cx.exe"
          fi
          mv ./bin/${EXECUTABLE_NAME} ./resources/cx-server
          if [[ "${{ runner.os }}" != "Windows" ]]; then
            chmod +x ./resources/cx-server
          fi

      - name: Update package.json for build
        run: |
          npm install -g json
          json -I -f package.json -e "this.build.extraResources=[{'from':'./resources/cx-server','to':'cx-server'}]"

      # --- START OF DEFINITIVE FIX ---
      - name: Build and package the application
        # We tell electron-builder NEVER to auto-publish.
        # The 'release' job is responsible for publishing.
        run: npm run electron:build -- --publish never
      # --- END OF DEFINITIVE FIX ---

      - name: Upload installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: cx-studio-${{ matrix.os }}
          path: dist/*.{AppImage,deb,dmg,msi,exe}

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    # --- PERMISSIONS ARE ONLY NEEDED HERE ---
    permissions:
      contents: write
    # --- END ---
    steps:
      - name: Download all installer artifacts
        uses: actions/download-artifact@v4
        with:
          path: installers

      - name: Create release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          files: installers/**/*
