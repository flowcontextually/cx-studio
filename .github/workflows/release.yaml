name: Build & Release CX Studio

on:
  push:
    tags:
      - "v*" # Trigger on tags like v0.1.0, v1.2.3, etc.

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout cx-studio code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20" # Use a specific LTS version
          cache: "npm"

      - name: Install npm dependencies
        run: npm install

      # --- This is the key step to get the backend executable ---
      - name: Download cx-server artifact
        uses: robinraju/release-downloader@v1
        with:
          repository: "flowcontextually/cx-shell" # The repo to download from
          tag: "v0.6.0" # IMPORTANT: For now, we hardcode the version. In a real pipeline, you'd make this dynamic.
          fileName: "cx-*-${{ runner.os }}.*" # A pattern to match the correct asset
          tarBall: false
          zipBall: false
          out-file-path: "./bin/" # Download it to a local 'bin' directory

      - name: Prepare cx-server executable
        shell: bash
        run: |
          mkdir -p ./resources # electron-builder will look here for extraResources
          # Find the downloaded file (which could be a .zip or .tar.gz)
          ARCHIVE=$(find ./bin -type f -name "cx-*.zip" -o -name "cx-*.tar.gz")
          echo "Found archive: $ARCHIVE"

          # Extract the archive
          if [[ "$ARCHIVE" == *.zip ]]; then
            unzip "$ARCHIVE" -d ./bin
          else
            tar -xzf "$ARCHIVE" -C ./bin
          fi

          # Find the executable and move it to where electron-builder expects it
          EXECUTABLE_NAME="cx"
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            EXECUTABLE_NAME="cx.exe"
          fi

          mv ./bin/dist/${EXECUTABLE_NAME} ./resources/cx-server

          # Make it executable on Linux/macOS
          if [[ "${{ runner.os }}" != "Windows" ]]; then
            chmod +x ./resources/cx-server
          fi

      - name: Update package.json for build
        # This step modifies the package.json to use the local, downloaded cx-server
        # instead of a relative path. This makes the CI build self-contained.
        run: |
          npm install -g json
          json -I -f package.json -e "this.build.extraResources=[{'from':'./resources/cx-server','to':'cx-server'}]"

      - name: Build and package the application
        run: npm run electron:build
        env:
          # Required for macOS and Windows code signing in a real-world scenario
          # For now, we can skip signing for this test.
          # GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: cx-studio-${{ matrix.os }}
          path: dist/*.{AppImage,deb,dmg,exe}

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to create the release

    steps:
      - name: Download all installer artifacts
        uses: actions/download-artifact@v4
        with:
          path: installers

      - name: Create release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          files: installers/**/*
